/*
 * Copyright 2015 Ramiro Rojo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
$max-cols: 12;

$app-background-color: #CCC;
$app-padding:          5px;
$app-max-width:        1200px;

$primary-bg-color:    rgb(99, 178, 212);
$secondary-bg-color:  rgb(210, 231, 232);
$disabled-bg-color:   saturate($primary-bg-color, 80%);
$active-bg-color:     lighten($primary-bg-color, 20%);
$hover-bg-color:      lighten($primary-bg-color, 30%);
$pressed-bg-color:    darken($primary-bg-color, 20%);

$primary-border-color:    rgb(49, 54, 117);
$disabled-border-color:   saturate($primary-border-color, 80%);
$active-border-color:     lighten($primary-border-color, 20%);
$hover-border-color:      lighten($primary-border-color, 30%);
$pressed-border-color:    darken($primary-border-color, 20%);

$base-txt-color:     rgb(89, 126, 131);
$disabled-txt-color: saturate($base-txt-color, 80%);
$active-txt-color:    lighten($base-txt-color, 20%);
$hover-txt-color:    lighten($base-txt-color, 30%);
$pressed-txt-color:  darken($base-txt-color, 20%);

$xs-max-size: 767px;
$sm-max-size: 992px;
$md-max-size: $app-max-width;

// _decimal.scss | MIT License | gist.github.com/terkel/4373420

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function decimal-ceil ($number, $digits: 0) {
    @return decimal-round($number, $digits, ceil);
}

// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     decimal-floor(0.333)    => 0
//     decimal-floor(0.333, 1) => 0.3
//     decimal-floor(0.333, 2) => 0.33
//     decimal-floor(0.666)    => 0
//     decimal-floor(0.666, 1) => 0.6
//     decimal-floor(0.666, 2) => 0.66
//
@function decimal-floor ($number, $digits: 0) {
    @return decimal-round($number, $digits, floor);
}

@mixin clearfix() {
  content: "";
  display: table;
  clear:   both;
}

@mixin border-radius($size) {
  -webkit-border-radius: $size;
  -moz-border-radius:    $size;
  -ms-border-radius:     $size;
  border-radius:         $size;
}

.ui-app {
  width: 100%;
  max-width: $app-max-width;
  margin: auto;
}

.ui-grid {
  width:      100%;
  box-sizing: border-box;
}

.ui-row:before,
.ui-row:after {
  @include clearfix();
}

.ui-cell {

}

[class*='ui-cell-'] {
  float: left;
  min-height: 1px;
  width: percentage(decimal-floor(1 / $max-cols, 5));
}

  @for $n from 1 through $max-cols {
    .ui-cell-xs-#{$n} {
      width: percentage(decimal-floor($n / $max-cols, 5));
    }
  }


@media all and (min-width:$xs-max-size) {

  @for $n from 1 through $max-cols {
    .ui-cell-sm-#{$n} {
      width: percentage(decimal-floor($n / $max-cols, 5));
    }
  }

}

@media all and (min-width:$sm-max-size) {

  @for $n from 1 through $max-cols {
    .ui-cell-md-#{$n} {
      width: percentage(decimal-floor($n / $max-cols, 5));
    }
  }

}

@media all and (min-width:$md-max-size) {

@for $n from 1 through $max-cols {
  .ui-cell-lg-#{$n} {
    width: percentage(decimal-floor($n / $max-cols, 5));
  }
}

}
